ðŸ“‚ app.py: "from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///biblioteca.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Import models
from models.usuario import Usuario
from models.livro import Livro
from models.association import livros_usuarios

# Import routes
from routes.usuarios import usuarios_bp
from routes.livros import livros_bp
from routes.stats import stats_bp

# Register routes
app.register_blueprint(usuarios_bp)
app.register_blueprint(livros_bp)
app.register_blueprint(stats_bp)

if __name__ == '__main__':
    app.run(debug=True)"

ðŸ“‚ models/__init__.py: "# Empty file to make 'models' a package"

ðŸ“‚ models/usuario.py: "from app import db

class Usuario(db.Model):
    __tablename__ = 'usuarios'

    id_usuario = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)"

ðŸ“‚ models/livro.py: "from app import db

class Livro(db.Model):
    __tablename__ = 'livros'

    id_livro = db.Column(db.Integer, primary_key=True)
    titulo = db.Column(db.String(200), nullable=False)
    autor = db.Column(db.String(200), nullable=False)
    genero = db.Column(db.String(100))
    status = db.Column(db.String(50), default="disponÃ­vel")
    capa_url = db.Column(db.String(300))"

ðŸ“‚ models/association.py: "from app import db

livros_usuarios = db.Table(
    'livros_usuarios',
    db.Column('id_livro', db.Integer, db.ForeignKey('livros.id_livro')),
    db.Column('id_usuario', db.Integer, db.ForeignKey('usuarios.id_usuario'))
)"

ðŸ“‚ routes/__init__.py: "# Empty file to make 'routes' a package"

ðŸ“‚ routes/usuarios.py: "from flask import Blueprint, jsonify, request
from app import db
from models.usuario import Usuario

usuarios_bp = Blueprint('usuarios', __name__)

@usuarios_bp.route('/usuarios', methods=['GET'])
def listar_usuarios():
    usuarios = Usuario.query.all()
    return jsonify([{"id": u.id_usuario, "nome": u.nome, "email": u.email} for u in usuarios])

@usuarios_bp.route('/usuarios', methods=['POST'])
def criar_usuario():
    data = request.get_json()
    novo = Usuario(nome=data['nome'], email=data['email'])
    db.session.add(novo)
    db.session.commit()
    return jsonify({"id": novo.id_usuario, "nome": novo.nome, "email": novo.email}), 201"

ðŸ“‚ routes/livros.py: "from flask import Blueprint, jsonify, request
from app import db
from models.livro import Livro

livros_bp = Blueprint('livros', __name__)

@livros_bp.route('/livros', methods=['GET'])
def listar_livros():
    livros = Livro.query.all()
    return jsonify([{"id": l.id_livro, "titulo": l.titulo, "autor": l.autor} for l in livros])

@livros_bp.route('/livros', methods=['POST'])
def criar_livro():
    data = request.get_json()
    novo = Livro(
        titulo=data['titulo'],
        autor=data['autor'],
        genero=data.get('genero'),
        status=data.get('status', 'disponÃ­vel'),
        capa_url=data.get('capa_url')
    )
    db.session.add(novo)
    db.session.commit()
    return jsonify({"id": novo.id_livro, "titulo": novo.titulo, "autor": novo.autor}), 201"

ðŸ“‚ routes/stats.py: "from flask import Blueprint, jsonify
from models.usuario import Usuario
from models.livro import Livro

stats_bp = Blueprint('stats', __name__)

@stats_bp.route('/stats', methods=['GET'])
def get_stats():
    total_usuarios = Usuario.query.count()
    total_livros = Livro.query.count()

    return jsonify({
        "total_usuarios": total_usuarios,
        "total_livros": total_livros
    })"

Structure should be?:

puc-rio-biblioteca-backend/
â”‚
â”œâ”€â”€ app.py
â”œâ”€â”€ requirements.txt
â”œâ”€â”€ README.md
â”œâ”€â”€ LICENSE
â”‚
â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ usuario.py
â”‚   â”œâ”€â”€ livro.py
â”‚   â””â”€â”€ association.py
â”‚
â”œâ”€â”€ routes/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ usuarios.py
â”‚   â”œâ”€â”€ livros.py
â”‚   â””â”€â”€ stats.py
â”‚
â””â”€â”€ migrations/
    â”œâ”€â”€ env.py
    â”œâ”€â”€ README
    â”œâ”€â”€ alembic.ini
    â”œâ”€â”€ versions/
    â”‚   â””â”€â”€ <timestamp>_initial_tables.py